///////////////////////////////////////////////////////////////
///////////////////////// Mystia 3rd //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Mystia 3rd"]
#Text["Mystia 3rd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_BROWN;
int _colorB = COLOR_ORANGE;

// Have you killed any enemies
int _killed = 0;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 17);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_MYSTIA);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 497, 600, 175, 135, 70, _colorA, _colorB, CENTER_X, 110, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Visibility();
	_Pattern();
	_Achieve();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(21000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Visibility()
{
	int objPlayer = GetPlayerObjectID();
	
	loop
	{
		for each(int iShots in ref GetShotIdInCircleA2(CENTER_X, CENTER_Y, 1024, TARGET_ENEMY))
		{
			ObjRender_SetAlpha(iShots, Interpolate_Linear(255, 0, GetObjectDistance(iShots, GetNearestEnemy(iShots)) / 200));
		}
		
		yield;
	}
}

task _Pattern()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(70);
	
	int iMax = 4;
	int dir = 1;
	
	loop
	{
		for(int i = 0; i <= iMax; i++)
		{
			loop(2)
			{
				if(!(i == 0 && dir == 1))
				{
					_ManageEnemy(CreateEnemy
					(
						1000, STANDARD_ENEMYHITBOX, true, true,
						COLOR_RED, STANDARD_ENEMYSCALE, true, true,
						CENTER_X + ((i * 50) * dir), -30, CENTER_X + ((i * 50) * dir), -30, 0
					), CENTER_X - ((i * 50) * dir), FRAME_HEIGHT + 40);
				}
				
				dir *= -1;
			}
			
			wait(280);
		}
	}
}

task _ManageEnemy(int objEnemy_, int destX_, int destY_)
{
	ObjMove_SetDestAtFrame(objEnemy_, destX_, destY_, 560, LERP_DECELERATE);
	
	float enmX = ObjMove_GetX(objEnemy_);
	float enmY = ObjMove_GetY(objEnemy_);
	
	wait(15);
	
	while(ObjEnemy_GetInfo(objEnemy_, INFO_LIFE) > 0)
	{
		enmX = ObjMove_GetX(objEnemy_);
		enmY = ObjMove_GetY(objEnemy_);
	
		// Rings
		int  way = 11;
		float off = rand(0, 360);
		for(int i = 0; i <= way; i++)
		{
			CreateShot_Enemy(enmX, enmY, 0.1, (i * (360 / way)) + off, 0.005, 2, SHOT_BALL_RED, 20);
		}
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(70);
	}
	
	yield;
	
	_killed = GetAreaCommonData(AREA_GAME, FAMILIAR_KILL, 0);
}

task _Achieve()
{
	SetAreaCommonData(AREA_GAME, ACHIEVE_READY, CH28);
	
	loop
	{
		if(_killed > 0)
		{
			SetAreaCommonData(AREA_GAME, ACHIEVE_READY, "ID_INVALID");
			return;
		}
		
		yield;
	}
}
///////////////////////////////////////////////////////////////
////////////////////////// Rumia 1st //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Rumia 1st"]
#Text["Rumia 1st"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_YELLOW;
int _colorB = COLOR_DYELLOW;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);

	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 1);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_RUMIA);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 440, 640, 122, 93, 70, _colorA, _colorB, CENTER_X, 180, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	//SetSkipModeKey(KEY_LCONTROL);
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(20000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);

	loop
	{
		loop(3)
		{
			// Aimed claws of lines
			float ang = GetAngleToPlayer(_objBoss);
			int stack = 5;
			for(int i = 0; i <= stack; i++)
			{
				int way = 2;
				for(int j = -way; j <= way; j++)
				{
					CreateShot_Enemy(_enmX, _enmY, 0.5 + (i / 8), ang + (j * 20), 0.025 + (i / 400), 2 + (i / 4), SHOT_BALL_YELLOW, 15);
				}
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(45);
		}
		
		// Rings
		int stack = 4;
		float off = rand(0, 360);
		float wvel = 0.2;
		for(int i = 0; i <= stack; i++)
		{
			int way = 20;
			for(int j = 0; j <= way; j++)
			{
				ObjMove_SetAngularVelocity(CreateShot_Enemy(_enmX, _enmY, 0.35 + (i / 6), (j * (360 / way)) + off, 0.01 + (i / 350) , 1.5 + (i / 2.5), SHOT_RICE_YELLOW, 20), wvel);
			}
			wvel *= -1;
		}
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(120);
	}
}
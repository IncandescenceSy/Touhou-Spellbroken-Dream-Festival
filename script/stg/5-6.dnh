///////////////////////////////////////////////////////////////
/////////////////////// Clownpiece 2nd ////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Clownpiece 2nd"]
#Text["Clownpiece 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions pertaining to items and bullet deletion effects
#include "./../lib/lib_item.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_RED;
int _colorB = COLOR_DBLUE;

// Ikaruga
const int[] _RGB_COLOR_BLUE = ColorHexToARGB(COLOR_BLUE, COLOR_PERMUTE_RGB);
const int[] _RGB_COLOR_RED  = ColorHexToARGB(COLOR_RED, COLOR_PERMUTE_RGB);
const int[][] _COLORS = [_RGB_COLOR_BLUE, _RGB_COLOR_RED];

int[][] _colorsA = [[Interpolate_Linear(_RGB_COLOR_BLUE[0], 255, 0.35), Interpolate_Linear(_RGB_COLOR_BLUE[1], 255, 0.35), Interpolate_Linear(_RGB_COLOR_BLUE[2], 255, 0.35)], [Interpolate_Linear(_RGB_COLOR_RED[0], 255, 0.35), Interpolate_Linear(_RGB_COLOR_RED[1], 255, 0.35), Interpolate_Linear(_RGB_COLOR_RED[2], 255, 0.35)]];
int[] _colorsB = [ColorARGBToHex(255, _colorsA[0][0], _colorsA[0][1], _colorsA[0][2]), ColorARGBToHex(255, _colorsA[1][0], _colorsA[1][1], _colorsA[1][2])];

const int _BLUE = 0;
const int _RED  = 1;

int _barrier = _BLUE;

int _switchTime = 0;

bool _isQueue = false;

// Whether shot particles are enabled
bool _prtSht = GetAreaCommonData(AREA_SETTINGS, PRT_SHT, 1);

// Particle list for laser collision effects
int _objPartStar;

if(_prtLsr)
{
	_objPartStar = CreateParticleList2D
	(
		DIR_IMG_EFF_STAR,
		0, 0, 256, 256,
		BLEND_ADD_ARGB, RP_FX_MED
	);
}

// Star trail effect
int _objPartTrail;

if(_prtSht)
{
	_objPartTrail = CreateParticleList2D
	(
		DIR_IMG_SYS_SHOT_1,
		408, 204, 442, 238,
		BLEND_ADD_ARGB, RP_FX_MED
	);
}


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 42);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_CLOWNPIECE);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 500, 740, 182, 82, 50, _colorA, _colorB, CENTER_X, 140, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	NotifyEvent(_ID_SYSTEM, EV_CREATE_TOAST_CONTROLS, PRESS_X);
	NotifyEvent(_ID_SYSTEM, EV_WARNING_GLOW, _colorA);
	NotifyEvent(_ID_PLAYER, EV_RECOLOR_WHILE_BOSS_LIVES, [255, 255, 255], _objBoss);
	
	// Pattern
	_Circle();
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(22500);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
// Ikaruga
	if(_isQueue || GetVirtualKeyState(VK_BOMB) == KEY_PUSH)
	{
		if(_switchTime == 0)
		{
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_TRANS);
			_barrier = 1 - _barrier;
			_switchTime = 20;
			_isQueue = false;
		}
		else
		{
			_isQueue = true;
		}
	}
	
	// Player color
	int[] col = ObjRender_GetColor(_objPlayer);
	ObjRender_SetColor(_objPlayer, Interpolate_Smooth(col[0], _colorsA[_barrier][0], 0.15), Interpolate_Smooth(col[1], _colorsA[_barrier][1], 0.15), Interpolate_Smooth(col[2], _colorsA[_barrier][2], 0.15));
		
	// Player option scale, color, and render priority
	NotifyEvent(_ID_PLAYER, EV_CONTROL_OPTIONS, 1, _colorsA[_barrier], RP_STG_PLR + 3, _colorsB[_barrier]);
	
	for each(int i in ref GetAllShotID(TARGET_ENEMY))
	{
		int[] color = GetShotDataInfoA1(ObjShot_GetImageID(i), TARGET_ENEMY, INFO_DELAY_COLOR);
		if(color == _COLORS[_barrier])
		{
			ObjRender_SetAlpha(i, 165);
		}
		else if(color == _COLORS[1 - _barrier])
		{
			ObjRender_SetAlpha(i, 255);
		}
	} 
	
	for each(int i in ref GetShotIdInCircleA2(GetPlayerX(), GetPlayerY(), 56, TARGET_ENEMY))
	{
		int[] color = GetShotDataInfoA1(ObjShot_GetImageID(i), TARGET_ENEMY, INFO_DELAY_COLOR);
		if(color == _COLORS[_barrier])
		{
			if(_prtSht) _CreateDeletionEffect([ObjMove_GetX(i), ObjMove_GetY(i)], color);
			AddScore(3010000);
			Obj_Delete(i);
		}
	} 
	
	_switchTime = max(_switchTime - 1, 0);
	
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Circle()
{
	float scale = 0.2;
	
	float plX = GetPlayerX();
	float plY = GetPlayerY();
	
	// Main circle
	int circleA = CreateSprite2D_Pos
	(
		DIR_IMG_EFF_CIRCLE_MAIN, RP_STG_PLR - 1, BLEND_ALPHA,
		0, 0, 627, 627,
		scale, scale,
		plX, plY
	);
	ObjRender_SetColor(circleA, COLOR_BLUE);
	
	// Glowing circle
	int circleB = CreateSprite2D_Pos
	(
		DIR_IMG_EFF_CIRCLE_MAIN, RP_STG_PLR - 1, BLEND_ADD_ARGB,
		0, 0, 627, 627,
		scale, scale,
		plX, plY
	);
	ObjRender_SetAlpha(circleB, 0);
	ObjRender_SetColor(circleB, COLOR_BLUE);
	
	int targetAlpha;
	
	// Counter variable
	int z = 0;
	
	loop
	{
		// Rotation
		ObjRender_SetAngleZ(circleA, z * 0.7);
		ObjRender_SetAngleZ(circleB, z * 0.7);
		
		// Glow
		ObjRender_SetAlpha(circleB, Interpolate_Smooth(255, 0, absolute(sin(z * 3))));
		
		// Attaches it to the player
		plX = GetPlayerX();
		plY = GetPlayerY();
		
		ObjRender_SetPosition(circleA, plX, plY, ID_INVALID);
		ObjRender_SetPosition(circleB, plX, plY, ID_INVALID);
		
		// Ikaruga
		int[] col = ObjRender_GetColor(circleA);
		ObjRender_SetColor(circleA, Interpolate_Smooth(col[0], (_barrier == _RED) ? _RGB_COLOR_RED[0] : _RGB_COLOR_BLUE[0], 0.3), Interpolate_Smooth(col[1], (_barrier == _RED) ? _RGB_COLOR_RED[1] : _RGB_COLOR_BLUE[1], 0.3), Interpolate_Smooth(col[2], (_barrier == _RED) ? _RGB_COLOR_RED[2] : _RGB_COLOR_BLUE[2], 0.3));
		ObjRender_SetColor(circleB, Interpolate_Smooth(col[0], (_barrier == _RED) ? _RGB_COLOR_RED[0] : _RGB_COLOR_BLUE[0], 0.3), Interpolate_Smooth(col[1], (_barrier == _RED) ? _RGB_COLOR_RED[1] : _RGB_COLOR_BLUE[1], 0.3), Interpolate_Smooth(col[2], (_barrier == _RED) ? _RGB_COLOR_RED[2] : _RGB_COLOR_BLUE[2], 0.3));
		
		// Counter variable
		z++;
		
		yield;
	}
}

task _Pattern()
{
	wait(60);
	loop
	{
		_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
		wait(65);
		_AimedStars([SHOT_STAR_RED, SHOT_STAR_BLUE], 50);
		_Lasers(-30, FRAME_WIDTH + 60, FRAME_HEIGHT + 20, 270, SHOT_CURVY_LASER_BLUE, _BLUE);
		wait(90);
		_AimedStars([SHOT_STAR_BLUE, SHOT_STAR_RED], 50);
		_Lasers(FRAME_WIDTH + 30, -60, -20, 90, SHOT_CURVY_LASER_RED, _RED);
		wait(25);
		_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
		wait(70);
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		float ang = GetAngleToPlayer(_objBoss);
		for(int i = 0; i < 8; i++)
		{
			_LaserStar(ang, (i % 2 == 0) ? SHOT_LARGE_STAR_HOLLOW_RED : SHOT_LARGE_STAR_HOLLOW_BLUE, (i % 2 == 0) ? SHOT_CURVY_LASER_RED : SHOT_CURVY_LASER_BLUE, (i % 2 == 0) ? COLOR_RED : COLOR_BLUE, (i % 2 == 0) ? _RED : _BLUE);
			ang += 360 / 8;
		}
		wait(45);
		_AimedStars([SHOT_STAR_RED, SHOT_STAR_BLUE], 15);
		wait(45);
		_AimedStars([SHOT_STAR_BLUE, SHOT_STAR_RED], 15);
		wait(30);
	}
}

task _AimedStars(int[] shots_, int cnt_)
{
	loop(cnt_ / 3)
	{
		float ang = GetAngleToPlayer(_objBoss);
		for(int i = -2; i <= 2; i++)
		{
			int shot = (i % 2 == 0) ? shots_[0] : shots_[1];
			CreateShot_Enemy(_enmX, _enmY, 0.5, ang + (i * 10), 0.05, 10, shot, 15);
		}
		
		wait(3);
	}
}

task _Lasers(float initX_, float destX_, float posY_, float ang_, int graphic_, int color_)
{
	loop(5)
	{
		_MoveLaser(CreateLaser_Ikaruga(initX_, posY_, ang_, 512, 25, 200, graphic_, 30, 56, color_), initX_, destX_);
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_LASER);
		
		wait(20);
	}
}

task _MoveLaser(int objLaser_, float initX_, float destX_)
{
	float iMax = 150;
	for(int i = 0; i <= iMax; i++)
	{
		ObjMove_SetX(objLaser_, Interpolate_Smooth(initX_, destX_, i / iMax));
		yield;
	}
}

task _LaserStar(float ang_, int graphic_, int laser_, int color_, int col_)
{
	int objShot = CreateShot_Enemy(_enmX, _enmY, 1.5, ang_, -0.03, 0, graphic_, 25);
	
	async
	{
		for(int i = 0; Obj_IsExists(objShot); i++)
		{	
			if(_prtSht && i >= 5)
			{
				async
				{
					float scaleOrg = 1.25;
					float scaleCur = scaleOrg;
					
					float posX = ObjMove_GetX(objShot);
					float posY = ObjMove_GetY(objShot);
					
					int z = 0;
				
					float iMax = 60;
					for(int i = 0; i <= iMax; i++)
					{
						// Color
						ObjParticleList_SetColor(_objPartTrail, color_);
									
						// Position
						ObjParticleList_SetPosition(_objPartTrail, posX, posY, ID_INVALID);
										
						// Rotation
						z++;
						ObjParticleList_SetAngleZ(_objPartTrail, z);
										
						// Size
						scaleCur = Interpolate_Smooth(scaleOrg, 0, i / iMax);
						ObjParticleList_SetScale(_objPartTrail, scaleCur);
						
						ObjParticleList_AddInstance(_objPartTrail);
						
						yield;
					}
				}
			}
			
			wait(5);
		}
	}
	
	wait(40);
	
	int objLaser = CreateLaser_Ikaruga(ObjMove_GetX(objShot), ObjMove_GetY(objShot), ObjMove_GetAngle(objShot), 512, 15, 150, laser_, 60, 56, col_);
	
	async
	{
		while(Obj_IsExists(objLaser))
		{
			ObjMove_SetPosition(objLaser, ObjMove_GetX(objShot), ObjMove_GetY(objShot));
			ObjMove_SetAngle(objLaser, ObjMove_GetAngle(objShot));
			
			if(Obj_IsDeleted(objShot)) Obj_Delete(objLaser);
			
			yield;
		}
	}
	
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_LASER);
	ObjMove_SetAngularVelocity(objShot, cos(ang_) * 1.5);
	ObjMove_SetAcceleration(objShot, 0.015);
	ObjMove_SetMaxSpeed(objShot, 2);
	
	wait(180);
	
	//NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_TRANS);
	ObjMove_SetAngularVelocity(objShot, 0.08);
}

function<int> CreateLaser_Ikaruga(float posX_, float posY_, float ang_, float length_, float width_, int deleteFrame_, float graphic_, float delay_, int rad_, int color_)
{
	int objStLaser = ObjShot_Create(OBJ_STRAIGHT_LASER);
	ObjShot_Regist(objStLaser);
	ObjMove_SetPosition(objStLaser, posX_, posY_);
	ObjStLaser_SetAngle(objStLaser, ang_);
	ObjLaser_SetIntersectionWidth(objStLaser, width_);
	ObjLaser_SetRenderWidth(objStLaser, width_);
	ObjShot_SetDeleteFrame(objStLaser, deleteFrame_);
	ObjShot_SetGraphic(objStLaser, graphic_);
	ObjLaser_SetItemDistance(objStLaser, 10);
	
	int[] shotColor = GetShotDataInfoA1(graphic_, TARGET_ENEMY, INFO_DELAY_COLOR);
	
	int objPlayer = GetPlayerObjectID();
	
	async
	{
		int t = 0;
		while(Obj_IsExists(objStLaser))
		{
			local
            {
                int lx = ObjMove_GetX(objStLaser);
                int ly = ObjMove_GetY(objStLaser);
				
                float px = GetPlayerX();
                float py = GetPlayerY();
                
                let dx = px - lx;
                let dy = py - ly;
                
				ang_ = ObjStLaser_GetAngle(objStLaser);
                let vx = cos(ang_);
                let vy = sin(ang_);
                
                let lw = dx * vy - dy * vx;
                let ld = dx * vx + dy * vy;
                
                ObjLaser_SetLength(objStLaser, min(t * 12, length_));
				
                if (ld > 0 && color_ == _barrier) 
				{
                    let lh = rad_ * rad_ - lw * lw;
                    if (lh > 0)
					{
                        let ll = ld - sqrt(lh);
                        ObjLaser_SetLength(objStLaser, min(min(t * 12, length_), max(ll, 0)));
						
						float pdx = GetPlayerX() + (vx * 1);
						float pdy = GetPlayerY() + (vy * 1);
						if(t * 12 >= GetObjectDistance(_objPlayer, objStLaser))
						{
							if(!Pos_IsInArea(pdx, pdy, 6, 6, FRAME_WIDTH - 6, FRAME_HEIGHT - 6)) NotifyEvent(_ID_PLAYER, EV_KILL_PLAYER, ID_INVALID);
							ObjMove_SetPosition(objPlayer, pdx, pdy);
						
						
							float laserEndX = lx + (max(ll, 0) * vx);
							float laserEndY = ly + (max(ll, 0) * vy);
							
							if(_prtLsr)
							{
								if(t % 18 == 0) _CreateDeletionEffect([laserEndX, laserEndY], shotColor);
							
								// Deletion particle effect
								if(t % 6 == 0)
								{
									async
									{
										float rad = prand(30, 50);
						
										float orgX = laserEndX + prand(-10, 10);
										float orgY = laserEndY + prand(-10, 10);
										
										float posX = orgX;
										float posY = orgY;
										
										float destX = posX + (rad * cos(prand(0, 360))); 
										float destY = posY + (rad * sin(prand(0, 360))); 
										
										float angX = prand(0, 180);
										float angY = prand(0, 180);
										
										float scaleOrg = prand(0.25, 0.3);
										float scaleCur = scaleOrg;
										
										float alphaOrg = 0;
										float alphaCur = alphaOrg;
										
										float iMax = 60;
										for(int i = 0; i <= iMax; i++)
										{
											// Color
											ObjParticleList_SetColor(_objPartStar, shotColor[0], shotColor[1], shotColor[2]);
										
											// Position
											posX = Interpolate_Accelerate(orgX, destX, i / iMax);
											posY = Interpolate_Accelerate(orgY, destY, i / iMax);
											ObjParticleList_SetPosition(_objPartStar, posX, posY, ID_INVALID);
											
											// Rotation
											angX += prand(1, 2);
											angY -= prand(1, 2);
											ObjParticleList_SetAngle(_objPartStar, angX, angY, (angX * angY) / 100);
											
											// Size
											scaleCur = Interpolate_Smooth(scaleOrg, 0, i / iMax);
											ObjParticleList_SetScale(_objPartStar, scaleCur);
											
											// Fade
											alphaCur = Interpolate_Smooth(alphaOrg, 255, i / iMax);
											ObjParticleList_SetAlpha(_objPartStar, alphaCur);
											
											ObjParticleList_AddInstance(_objPartStar);
											
											yield;
										}
									}
								}
							}
						}
                    }
                }
            }
        
            t++;
			
            yield;
		}
	}
	
	return objStLaser;
}
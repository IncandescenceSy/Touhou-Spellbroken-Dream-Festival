///////////////////////////////////////////////////////////////
////////////////////////// Seija 1st //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Seija 1st"]
#Text["Seija 1st"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_BLUE;
int _colorB = COLOR_DPURPLE;

	
//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	 
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 38);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_SEIJA);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 390, 630, 181, 110, 80, _colorA, _colorB, CENTER_X, 150, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(26000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{	
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	SetShotAutoDeleteClip(28, 28, (28 + FRAME_WIDTH) - (RES * FRAME_WIDTH), (28 + FRAME_HEIGHT) - (RES * FRAME_HEIGHT));
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);
	
	int stack = 2;
	int way = 30;
	
	loop
	{
		float off = GetAngleToPlayer(_objBoss);
		for(int i = 0; i <= stack; i++)
		{
			for(int j = 0; j <= way; j++)
			{
				_ManageShot(CreateShot_Enemy(_enmX, _enmY, 0, ((j * (360 / way)) + off) + (i * ((360 / way) / 2)), 0.01 + (0.015 * i), 2 + (1.5 * i), SHOT_RICE_INVERT_RED, 25), false, ((j * (360 / way)) + off) + (i * ((360 / way) / 2)), SHOT_RICE_INVERT_RED);
			}
		}
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(120);
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_TRANS);
		
		/*for each(int iShots in ref GetShotIdInCircleA2(CENTER_X, CENTER_Y, 1024, TARGET_ENEMY))
		{
			if(ObjShot_GetImageID(iShots) == SHOT_RICE_INVERT_RED)
			{
				ObjShot_SetGraphic(iShots, SHOT_RICE_INVERT_PURPLE);
				ObjMove_SetDestAtFrame(iShots, FRAME_WIDTH - ObjMove_GetX(iShots), ObjMove_GetY(iShots), 120, LERP_SMOOTH);
				_ManageShot(iShots);
			}
		}*/
		
		wait(120);
		
		off = GetAngleToPlayer(_objBoss);
		for(int i = 0; i <= stack; i++)
		{
			for(int j = 0; j <= way; j++)
			{
				_ManageShot(CreateShot_Enemy(_enmX, _enmY, 0.5, ((j * (360 / way)) + off) + (i * ((360 / way) / 2)), 0.015 + (0.02 * i), 2 + (1.5 * i), SHOT_RICE_INVERT_AZURE, 25), true, ((j * (360 / way)) + off) + (i * ((360 / way) / 2)), SHOT_RICE_INVERT_AZURE);
			}
		}
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(120);
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_TRANS);
		
		/*for each(int iShots in ref GetShotIdInCircleA2(CENTER_X, CENTER_Y, 1024, TARGET_ENEMY))
		{
			if(ObjShot_GetImageID(iShots) == SHOT_RICE_INVERT_BLUE)
			{
				ObjShot_SetGraphic(iShots, SHOT_RICE_INVERT_PURPLE);
				ObjMove_SetDestAtFrame(iShots, ObjMove_GetX(iShots), FRAME_HEIGHT - ObjMove_GetY(iShots), 120, LERP_SMOOTH);
				_ManageShot(iShots);
			}
		}*/
		
		wait(120);
	}
}

task _ManageShot(int objShot_, bool isHoriz_, float ang_, int graphic_)
{
	wait(120);
	
	float posX = ObjMove_GetX(objShot_);
	float posY = ObjMove_GetY(objShot_);
	float destX = (isHoriz_) ? FRAME_WIDTH - posX : posX;
	float destY = (isHoriz_) ? posY : FRAME_HEIGHT - ObjMove_GetY(objShot_);
	ObjShot_SetGraphic(objShot_, SHOT_RICE_INVERT_MAGENTA);
	ObjRender_SetAngleZ(objShot_, ObjMove_GetAngle(objShot_) + dottheta(posX, posY, destX, destY) + 180);
	ObjMove_SetDestAtFrame(objShot_, destX, destY, 180, LERP_SMOOTH);
	
	wait(180);
	
	ObjRender_SetAngleZ(objShot_, 0);
	ObjMove_SetSpeed(objShot_, 2);
	ObjMove_SetAngle(objShot_, ang_);
	ObjShot_SetGraphic(objShot_, graphic_);
}
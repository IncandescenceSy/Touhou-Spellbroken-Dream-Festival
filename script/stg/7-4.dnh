///////////////////////////////////////////////////////////////
///////////////////////// Koishi 2nd //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Koishi 2nd"]
#Text["Koishi 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_PURPLE;
int _colorB = COLOR_DGREEN;

// Movement variables
float _offX = 0;
float _offY = 0;
bool _mveX = false;
bool _mveY = false;
float[] _spd = GetPlayerSpeed(); 
int _state = 0;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{	
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 58);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_KOISHI);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 396, 620, 192, 111, 67, _colorA, _colorB, CENTER_X, 110, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	NotifyEvent(_ID_SYSTEM, EV_RESET_SPEED, _objBoss, _spd);
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(18000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);	
		
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
		
	wait(65);
	
	SetPlayerSpeed(0, 0);
	
	_Move();
	
	wait(30);
	
	const int[][] SHOTS = 
	[
		[SHOT_LARGE_DIAMOND_PURPLE, SHOT_LARGE_DIAMOND_GREEN],
		[SHOT_BUBBLE_GREEN, SHOT_BUBBLE_PURPLE]
	];
	
	for(int lp = 0; ; lp++)
	{
		for(int i = 0; i <= 21; i++)
		{
			float off = GetAngleToPlayer(_objBoss);
			int stack = 35;
			int way = 3;
			for(int j = -way; j <= way; j++)
			{
				CreateShot_Enemy(_enmX, _enmY, 0, off + (j * 5), 0.01 + (0.0025 * i), 1.5 + (0.2 * i), SHOTS[0][lp % 2], 25);
			}
			
			if(i % 7 == 0)
			{
				stack = 4;
				way = 6;
				for(int j = 0; j <= stack; j++)
				{
					for(int k = 0; k <= way; k++)
					{
						CreateShot_Enemy(_enmX, _enmY, 0, ((k * (360 / way)) + off) + (j * ((360 / way) / 2)), 0.025 + (0.0075 * j), 2 + (0.35 * j), SHOTS[0][(lp + 1) % 2], 25);
					}
				}
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(5);
		}
		
		wait(95);
		
		_AimedWall(lp);
		
		// Spirals of rings
		int way = 8 - (ObjEnemy_GetInfo(_objBoss, INFO_LIFE) / 6200);
		int way2 = 8 - (ObjEnemy_GetInfo(_objBoss, INFO_LIFE) / 5900);
		for(int i = 0; i <= way; i++)
		{
			float rad = i * 10;
			for(int j = 0; j <= 1; j++)
			{
				float ang = (i * (360 / way)) + (j * 180);
				for(int k = 0; k < way2; k++)
				{
					CreateShot_Enemy(_enmX + rad * cos(ang), _enmY + rad * sin(ang), 0, k * (360 / way2), 0.01 + (i / 350) , 1.5 + (i / 2.5), SHOTS[0][lp % 2], 20);
				}
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(10);
		}
		
		_AimedWall(lp);
		
		wait(50);
		
		// Rings
		loop(2)
		{
			int stack = 5 + min(5, lp);
			float off = GetAngleToPlayer(_objBoss);
			float wvel = 0.2;
			for(int i = 0; i <= stack; i++)
			{
				int way = 15 - (ObjEnemy_GetInfo(_objBoss, INFO_LIFE) / 3000);
				for(int j = 0; j < way; j++)
				{
					ObjMove_SetAngularVelocity(CreateShot_Enemy(_enmX, _enmY, 0.35 + (i / 6), (j * (360 / way)) + off, 0.01 + (i / 350) , 1.5 + (i / 2.5), SHOTS[1][lp % 2], 20), wvel);
				}
				wvel *= -1;
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(90);
		}
		
		wait(25);
	}
}

task _AimedWall(int lp_)
{
	int shot = [SHOT_LARGE_DIAMOND_GREEN, SHOT_LARGE_DIAMOND_PURPLE][lp_ % 2];
	float ang = GetAngleToPlayer(_objBoss);
	int way = 4;
	
	for(int i = -way; i <= way; i++)
	{
		CreateShot_Enemy(_enmX, _enmY, 0, ang + (i * 3), 0.02, 2, shot, 25);
	}
	
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
}

task _Move()
{
	float plX = GetPlayerX();
	float plY = GetPlayerY();
	
	// Main circle
	int circleA = CreateSprite2D_Pos
	(
		DIR_IMG_EFF_CIRCLE_MAIN, RP_STG_PLR - 1, BLEND_ALPHA,
		0, 0, 627, 627,
		0.125, 0.125,
		plX, plY
	);
	ObjRender_SetColor(circleA, _colorA);
	ObjRender_SetScaleXYZ(circleA, 0);
	
	// Glowing circle
	int circleB = CreateSprite2D_Pos
	(
		DIR_IMG_EFF_CIRCLE_MAIN, RP_STG_PLR - 1, BLEND_ADD_ARGB,
		0, 0, 627, 627,
		0.125, 0.125,
		plX, plY
	);
	ObjRender_SetAlpha(circleB, 0);
	ObjRender_SetColor(circleB, _colorA);
	ObjRender_SetScaleXYZ(circleB, 0);
		
	for(int i = 0; ; i++)
	{
		// Rotation
		ObjRender_SetAngleZ(circleA, i * 0.7);
		ObjRender_SetAngleZ(circleB, i * 0.7);
		
		// Glow
		ObjRender_SetAlpha(circleB, Interpolate_Smooth(255, 0, absolute(sin(i * 3))));
		
		// Size
		float curScale = Interpolate_Smooth(ObjRender_GetScaleX(circleA), 0.125, 0.1);
		ObjRender_SetScaleXYZ(circleA, curScale);
		ObjRender_SetScaleXYZ(circleB, curScale);
		
		// Movement
		float enmX = ObjRender_GetX(circleA);
		float enmY = ObjRender_GetY(circleA);
		
		if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD) _state = 1;
		else _state = 0;
		
		if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			_offX = -_spd[_state];
			_mveX = true;
		}
		else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			_offX = _spd[_state];
			_mveX = true;
		}
		if(GetVirtualKeyState(VK_UP) == KEY_PUSH || GetVirtualKeyState(VK_UP) == KEY_HOLD)
		{
			_offY = -_spd[_state];
			_mveY = true;
		}
		else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH || GetVirtualKeyState(VK_DOWN) == KEY_HOLD)
		{
			_offY = _spd[_state];
			_mveY = true;
		}
		
		if(_mveX && _mveY)
		{
			_offX *= M_SQRT2_2;
			_offY *= M_SQRT2_2;
		}
		
		if(_mveX || _mveY)
		{
			if(Pos_IsInArea(enmX + _offX, enmY, 0, 0, FRAME_WIDTH, FRAME_HEIGHT))
			{
				ObjRender_SetPosition(circleA, enmX + _offX, enmY, ID_INVALID);
				ObjRender_SetPosition(circleB, enmX + _offX, enmY, ID_INVALID);
			}
			
			enmX = ObjRender_GetX(circleA);
			enmY = ObjRender_GetY(circleA);
		
			if(Pos_IsInArea(enmX, enmY + _offY, 0, 0, FRAME_WIDTH, FRAME_HEIGHT))
			{
				ObjRender_SetPosition(circleA, enmX, enmY + _offY, ID_INVALID);
				ObjRender_SetPosition(circleB, enmX, enmY + _offY, ID_INVALID);
			}
		}
		
		_offX = 0;
		_offY = 0;
		_mveX = false;
		_mveY = false;
			
		// Moves the player
		ObjMove_SetPosition(_objPlayer, Interpolate_Smooth(GetPlayerX(), enmX, 0.1), Interpolate_Smooth(GetPlayerY(), enmY, 0.1));
		
		yield;
	}
}
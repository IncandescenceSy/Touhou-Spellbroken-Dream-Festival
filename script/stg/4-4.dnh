///////////////////////////////////////////////////////////////
//////////////////////// Misumaru 2nd /////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Misumaru 2nd"]
#Text["Misumaru 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_PURPLE;
int _colorB = COLOR_DRED;

// Particle list for laser collision effects
int _objPartStar = CreateParticleList2D
(
	DIR_IMG_EFF_STAR,
	0, 0, 256, 256,
	BLEND_ADD_ARGB, RP_FX_MED
);


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	 
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 31);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_MISUMARU);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 327, 620, 171, 104, 70, _colorA, _colorB, CENTER_X, 140, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	NotifyEvent(_ID_SYSTEM, EV_RENDER_PLAYER_CIRCLE, _objBoss, 0.125, _colorB);
	NotifyEvent(_ID_SYSTEM, EV_TOGGLE_PLAYER_CIRCLE, true);
	NotifyEvent(_ID_SYSTEM, EV_WARNING_GLOW, _colorA);
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(23000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{	
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	const int[][] SHOTS = [[SHOT_YINYANG_RED, SHOT_DROP_RED, SHOT_CURVY_LASER_RED], [SHOT_YINYANG_ORANGE, SHOT_DROP_ORANGE, SHOT_CURVY_LASER_ORANGE], [SHOT_YINYANG_YELLOW, SHOT_DROP_YELLOW, SHOT_CURVY_LASER_YELLOW], [SHOT_YINYANG_GREEN, SHOT_DROP_GREEN, SHOT_CURVY_LASER_GREEN], [SHOT_YINYANG_AQUA, SHOT_DROP_AQUA, SHOT_CURVY_LASER_AQUA], [SHOT_YINYANG_AZURE, SHOT_DROP_AZURE, SHOT_CURVY_LASER_AZURE], [SHOT_YINYANG_PURPLE, SHOT_DROP_PURPLE, SHOT_CURVY_LASER_PURPLE], [SHOT_YINYANG_MAGENTA, SHOT_DROP_MAGENTA, SHOT_CURVY_LASER_MAGENTA]];
	
	int way = 20;
	
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);
	
	loop
	{
		for(int i = 0; i <= 7; i++)
		{
			for(int j = 0; j < way; j++)
			{
				int objShot = CreateShot_Enemy(_enmX, _enmY, 0, GetAngleToPlayer(_objBoss) + (j * (360 / way)), 0.01, 2.5, j % 5 == 0 ? SHOTS[i][0] : SHOTS[i][1], j % 5 == 0 ? 50 : 25, j % 5 == 0 ? 0.75 : 1);
				if(j % 5 == 0) _ManageOrb(objShot, SHOTS[i][2]);
				else _ManageShot(objShot);
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(205);
			
			_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
			wait(65);
		}
	}
}

task _ManageShot(int objShot_)
{
	while(Obj_IsInArea(objShot_, 0, 0, FRAME_WIDTH, FRAME_HEIGHT)) yield;
	
	ObjMove_SetAngle(objShot_, Interpolate_Angle(NormalizeAngle(ObjMove_GetAngle(objShot_) + 180), 90, 0.5));
}

task _ManageOrb(int objOrb_, int graphic_)
{
	while(ObjMove_GetY(objOrb_) < FRAME_HEIGHT)
	{
		while(Obj_IsInArea(objOrb_, 0, 0, FRAME_WIDTH, FRAME_HEIGHT)) yield;
	
		if(ObjMove_GetY(objOrb_) < FRAME_HEIGHT)
		{
			ObjMove_SetAngle(objOrb_, Interpolate_Angle(NormalizeAngle(ObjMove_GetAngle(objOrb_) + 180), 90, 0.5));
			wait(30);
		}
		else
		{
			ObjMove_SetMaxSpeed(objOrb_, 0);
			break;
		}
	}
	
	CreateLaser_Blockable(ObjMove_GetX(objOrb_), ObjMove_GetY(objOrb_), GetAngleToPlayer(objOrb_), 796, 15, 90, graphic_, 0.9, 35, _objPartStar);
	
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_LASER);
	
	wait(90);
	
	ObjMove_SetMaxSpeed(objOrb_, 3);
}
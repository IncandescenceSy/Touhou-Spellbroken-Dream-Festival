///////////////////////////////////////////////////////////////
////////////////////// Wakasagahime 2nd ///////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Wakasagahime 3rd"]
#Text["Wakasagahime 3rd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_MINT;
int _colorB = COLOR_AZURE;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 8);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_WAKASAGAHIME);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 372, 600, 170, 99, 90, _colorA, _colorB, CENTER_X, 80, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Water();
	_Waves();
	_Claws();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(28000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Water()
{
	int objWater = CreateSprite2D_NoTexture_Dest_RGB
	(
		RP_FX_MED_H, BLEND_ALPHA,
		0, 0, 1, 1,
		0, FRAME_HEIGHT, FRAME_WIDTH, FRAME_HEIGHT,
		COLOR_AZURE
	);
	ObjRender_SetAlpha(objWater, 80);
	
	float iMax = 120;
	for(int i = 0; i <= iMax; i++)
	{
		ObjSprite2D_SetDestRect(objWater, 0, Interpolate_Smooth(FRAME_HEIGHT, 150, i / iMax), FRAME_WIDTH, FRAME_HEIGHT);
			
		yield;
	}
	
	loop
	{
		for each(int iShots in ref GetShotIdInCircleA2(CENTER_X, CENTER_Y, 1024, TARGET_ENEMY))
		{
			int image = ObjShot_GetImageID(iShots);
			if(ObjMove_GetY(iShots) > 150 && (image == SHOT_SCALE_AQUA || image == SHOT_SCALE_AZURE || image == SHOT_KNIFE_GREEN))
			{
				ObjShot_SetGraphic(iShots, (image == SHOT_SCALE_AQUA) ? SHOT_SCALE_GREEN : (image == SHOT_SCALE_AZURE) ? SHOT_SCALE_MINT : SHOT_KNIFE_BLUE);
				
				float ang = ObjMove_GetAngle(iShots);
				
				ObjMove_SetAngle(iShots, rand(ang - 20, ang + 20));
			}
		}
		
		yield;
	}
}

task _Waves()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(70);
	
	for(int i = 0; ; i++)
	{
		if(i % 18 == 0)
		{
			CreateShot_Enemy(CENTER_X + (sin(i * 2) * CENTER_X), -10, 1, 90, 0, 1, SHOT_SCALE_AQUA, 0);
			CreateShot_Enemy(CENTER_X - (sin(i * 2) * CENTER_X), -10, 1, 90, 0, 1, SHOT_SCALE_AQUA, 0);
			CreateShot_Enemy(CENTER_X + (sin(i / 2) * CENTER_X), -10, 1, 90, 0, 1, SHOT_SCALE_AZURE, 0);
			CreateShot_Enemy(CENTER_X - (sin(i / 2) * CENTER_X), -10, 1, 90, 0, 1, SHOT_SCALE_AZURE, 0);
		}
		 
		yield;
	}
}

task _Claws()
{
	wait(250);
	
	loop
	{
		_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
		wait(70);
		
		float ang = GetAngleToPlayer(_objBoss);
		int stack = 8;
		for(int i = 0; i <= stack; i++)
		{
			int way = 1;
			for(int j = -way; j <= way; j++)
			{
				int objShot = CreateShot_Enemy(_enmX, _enmY, 0.5 + (i * 0.125), ang + (j * 20), 0.025 + (i * 0.003), 2 + (i * 0.3), SHOT_KNIFE_GREEN, 20);
			}
		}
		
		wait(90);
	}
}
///////////////////////////////////////////////////////////////
///////////////////////// Remilia 1st /////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Remilia 1st"]
#Text["Remilia 1st"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_RED;
int _colorB = COLOR_DRED;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 46);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_REMILIA);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 418, 600, 184, 109, 50, _colorA, _colorB, CENTER_X, 140, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(25000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(12);

	/*loop(50)
	{
		ObjRender_SetBlendType(CreateLaser_Straight(rand(-30, FRAME_WIDTH + 30), -30, 90 + rand(-25, 25), 550, 23, 150, SHOT_LIGHTNING, 150, COLOR_WHITE), BLEND_ALPHA);
		
		wait(8);
	}*/
	
	/*loop(4)
	{
		// Rings
		int stack = 4;
		float off = 90;
		float wvel = 0.3;
		for(float j = 0; j <= stack; j++)
		{
			int way = 14;
			for(float k = 0; k <= way; k++)
			{
				ObjMove_SetAngularVelocity(CreateShot_Enemy(100, -30, 0.35 + (j / 6), (k * (360 / way)) + off, 0.01 + (j / 350) , 1.5 + (j / 2.5), SHOT_BALL_AURA_RED, 20), wvel);
				ObjMove_SetAngularVelocity(CreateShot_Enemy(CENTER_X, -30, 0.35 + (j / 6), (k * (360 / way)) + off, 0.01 + (j / 350) , 1.5 + (j / 2.5), SHOT_BALL_AURA_RED, 20), wvel);
				ObjMove_SetAngularVelocity(CreateShot_Enemy(FRAME_WIDTH - 100, -30, 0.35 + (j / 6), (k * (360 / way)) + off, 0.01 + (j / 350) , 1.5 + (j / 2.5), SHOT_BALL_AURA_RED, 20), wvel);
			}
			wvel *= -1;
		}
			
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
		wait(100);
	}*/
	
	/*int stack = 4;
	
	for(int i = 0; i < 411; i += 3)
	{
		float posX = rand(-30, FRAME_WIDTH + 30);
		for(int j = 0; j < stack; j++) CreateShot_Enemy(posX, -30, 0, 90, 0.01 + (j * 0.0075), 2 + (j * 0.5), SHOT_LARGE_DIAMOND_RED, 0);
		
		wait(3);
	}
	
	ObjMove_SetDestAtFrame(_objBoss, CENTER_X, 140, 60, LERP_DECELERATE);
	
	_Hitbox();
	*/
	
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);
	
	// Left
	
	_ManageEnemy(CreateEnemy
	(
		1, 0, false, false,
		COLOR_RED, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, CENTER_X - 50, _enmY - 20, 120
	), 1);
	
	_ManageEnemy(CreateEnemy
	(
		1, 0, false, false,
		COLOR_RED, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, CENTER_X - 100, _enmY - 40, 120
	), 1);
	
	_ManageEnemy(CreateEnemy
	(
		1, 0, false, false,
		COLOR_RED, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, CENTER_X - 150, _enmY - 60, 120
	), 1);
	
	// Right
	
	_ManageEnemy(CreateEnemy
	(
		1, 0, false, false,
		COLOR_RED, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, CENTER_X + 50, _enmY - 20, 120
	), -1);
	
	_ManageEnemy(CreateEnemy
	(
		1, 0, false, false,
		COLOR_RED, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, CENTER_X + 100, _enmY - 40, 120
	), -1);
	
	_ManageEnemy(CreateEnemy
	(
		1, 0, false, false,
		COLOR_RED, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, CENTER_X + 150, _enmY - 60, 120
	), -1);
	
	// Lasers
	async
	{
		loop
		{
			ObjRender_SetBlendType(CreateLaser_Straight(rand(-30, 15), -30, 90 + rand(-10, 10), 550, 13, 150, SHOT_LIGHTNING, 150, COLOR_RED), BLEND_ALPHA);
			
			ObjRender_SetBlendType(CreateLaser_Straight(rand(FRAME_WIDTH - 30, FRAME_WIDTH + 15), -30, 90 + rand(-10, 10), 550, 13, 150, SHOT_LIGHTNING, 150, COLOR_RED), BLEND_ALPHA);
			
			wait(12);
		}
	}
	
	wait(60);
	
	loop
	{
		loop(2)
		{
			// Rings
			int stack = 6;
			float off = GetAngleToPlayer(_objBoss);
			float wvel = 0.3;
			for(int i = 0; i <= stack; i++)
			{
				int way = 50 - (ObjEnemy_GetInfo(_objBoss, INFO_LIFE) / 750);
				for(int j = 0; j <= way; j++)
				{
					ObjMove_SetAngularVelocity(CreateShot_Enemy(_enmX, _enmY, 0.35 + (i / 6), (j * (360 / way)) + off, 0.01 + (i / 350) , 1.5 + (i / 2.5), SHOT_BALL_AURA_RED, 20), wvel);
				}
				wvel *= -1;
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(180);
		}
		
		loop(5)
		{
			// Aimed claws of lines
			float ang = GetAngleToPlayer(_objBoss);
			int stack = 7;
			for(int i = 0; i <= stack; i++)
			{
				int way = 3;
				for(int j = -way; j <= way; j++)
				{
					CreateShot_Enemy(_enmX, _enmY, 0.5 + (i / 8), ang + (j * 20), 0.025 + (i / 400), 2 + (i / 4), SHOT_SCALE_RED, 15);
				}
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(45);
		}
		
		wait(45);
	}
}

task _ManageEnemy(int objEnemy_, int dir_)
{
	for(int i = 0; ; i++)
	{
		float enmX = ObjMove_GetX(objEnemy_);
		float enmY = ObjMove_GetY(objEnemy_);
		
		CreateShot_Enemy(enmX, enmY, 0, 90 + ((sin(i * 3.7) * 20) * dir_), 0.025, 3, SHOT_LARGE_DIAMOND_RED, 25);
		CreateShot_Enemy(enmX, enmY, 0, 270 + ((sin(i * 3.7) * 20) * dir_), 0.025, 3, SHOT_LARGE_DIAMOND_RED, 25);
		
		if(i > 7)
		{
			ObjMove_SetSpeed(objEnemy_, 0.01);
			ObjMove_SetAngle(objEnemy_, GetObjectDeltaAngle(objEnemy_, _objBoss) + 180);
		}
		
		wait((i > 7) ? 6 : 12);
	}
}

task _Hitbox()
{
	const int RADIUS_HITBOX = 32;
	
	loop
	{
		ObjEnemy_SetIntersectionCircleToShot(_objBoss, _enmX, _enmY, RADIUS_HITBOX);
		ObjEnemy_SetIntersectionCircleToPlayer(_objBoss, _enmX, _enmY, RADIUS_HITBOX / 2);
		
		yield;
	}
}
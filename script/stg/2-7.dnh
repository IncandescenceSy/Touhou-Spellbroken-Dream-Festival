///////////////////////////////////////////////////////////////
////////////////////////// Cirno 3rd //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Cirno 3rd"]
#Text["Cirno 3rd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_BLUE;
int _colorB = COLOR_AZURE;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 16);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_CIRNO);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 415, 600, 164, 75, 70, _colorA, _colorB, CENTER_X, 125, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(28000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);
	
	int[] shots = [];
	
	_Push(25);
	
	// Rings
	int  way = 75;
	float off = rand(0, 360);
	for(int i = 0; i <= way; i++)
	{
		shots ~= [CreateShot_Enemy(_enmX, _enmY, 0.5, (i * (360 / way)) + off, 0.5, 12, prand_int(SHOT_LARGE_DIAMOND_RED, SHOT_LARGE_DIAMOND_PINK), 0)];
	}
	
	wait(30);
		
	for each(int iShots in ref shots)
	{
		ObjMove_SetProcessMovement(iShots, false);
		ObjShot_SetGraphic(iShots, SHOT_LARGE_DIAMOND_GREY);
	}
		
	loop
	{	
		_RenderCharge(_enmX, _enmY, 3, _colorA, _colorB);
		
		wait(160);
		
		for each(int iShots in ref shots) ObjMove_SetProcessMovement(iShots, true);
		
		shots = [];
		
		_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
		
		wait(65);
		
		_Push(40);
		
		// Rings
		for(int i = 0; i <= 5; i++)
		{
			float off = rand(0, 360);
			int way = 9 + (i * 7);
			for(int j = 0; j <= way; j++)
			{
				shots ~= [CreateShot_Enemy(_enmX, _enmY, 0.5, (j * (360 / way)) + off, 0.5, 12, prand_int(SHOT_LARGE_DIAMOND_RED, SHOT_LARGE_DIAMOND_PINK), 15)];
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			_Freeze(shots, i);
			
			wait(10);
		}
	}
}

task _Freeze(int[] shots_, int index_)
{
	wait(15 + (index_ * 3));
	
	for each(int iShots in ref shots_)
	{
		ObjMove_SetProcessMovement(iShots, false);
		ObjShot_SetGraphic(iShots, SHOT_LARGE_DIAMOND_GREY);
	}
}

task _Push(int iMax_)
{
	loop(iMax_)
	{
		float ang = GetAngleToPlayer(_objBoss) + 180;
		ObjMove_SetX(_objPlayer, GetPlayerX() - 10 * cos(ang));
		ObjMove_SetY(_objPlayer, GetPlayerY() - 10 * sin(ang));
		
		yield;
	}
}
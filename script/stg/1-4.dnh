///////////////////////////////////////////////////////////////
////////////////////////// Rumia 2nd //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Rumia 2nd"]
#Text["Rumia 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_YELLOW;
int _colorB = COLOR_DYELLOW;

// Particle list for laser collision effects
int _objPartStar = CreateParticleList2D
(
	DIR_IMG_EFF_STAR,
	0, 0, 256, 256,
	BLEND_ADD_ARGB, RP_FX_MED
);


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 4);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_RUMIA);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 440, 640, 122, 93, 70, _colorA, _colorB, CENTER_X, 80, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	NotifyEvent(_ID_SYSTEM, EV_RENDER_PLAYER_CIRCLE, _objBoss, 0.2, _colorB);
	NotifyEvent(_ID_SYSTEM, EV_TOGGLE_PLAYER_CIRCLE, true);
	NotifyEvent(_ID_SYSTEM, EV_WARNING_GLOW, _colorA);
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(28000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(70);
	
	int way = 12;
	for(int i = 0; i < way; i++)
	{
		_Rotate(CreateLaser_Blockable(_enmX, _enmY, i * (360 / way), 512, 15, INT_MAX, SHOT_CURVY_LASER_YELLOW, 0.75, 56, _objPartStar), 0.5, 1);
	}
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_LASER);
	
	loop
	{
		way = 20;
		float off = rand(0, 360);
		for(int i = 0; i <= way; i++)
		{
			float ang = (i * (360 / way)) + off;
			CreateShot_Enemy(_enmX, _enmY, 0, ang, 0.01, 2.25, SHOT_SCALE_YELLOW, 30);
		}
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(45);
	}
}

task _Rotate(int objLaser_, float spd_, int dir_)
{
	ObjShot_SetAutoDelete(objLaser_, false);
	
	while(Obj_IsExists(objLaser_))
	{
		ObjStLaser_SetAngle(objLaser_, ObjStLaser_GetAngle(objLaser_) + (spd_ * dir_));
		
		yield;
	}
}
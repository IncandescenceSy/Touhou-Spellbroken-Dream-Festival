///////////////////////////////////////////////////////////////
////////////////////////// Cirno 2nd //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Cirno 2nd"]
#Text["Cirno 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_BLUE;
int _colorB = COLOR_AZURE;

// Grave destination radius
float _radDest = 0;

// Player speed
float[] _spd = GetPlayerSpeed();


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 13);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_CIRNO);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 415, 600, 164, 75, 70, _colorA, _colorB, CENTER_X, 125, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	NotifyEvent(_ID_SYSTEM, EV_RESET_SPEED, _objBoss, _spd);
	
	// Pattern
	_Pattern();
	_Grave();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(28000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{		
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(70);
	
	int way = 2;
	int iMax = 190;
	
	loop
	{
		for(int i = 0; i <= iMax; i++)
		{
			if(i % 10 == 0)
			{
				for(int j = -way; j <= way; j++)
				{
					CreateShot_Enemy(CENTER_X + (sin(i * 2) * CENTER_X), -20, 0.5, 70 + (j * 15), 0.015, 3, SHOT_ICE_AQUA, 0);
					CreateShot_Enemy(CENTER_X - (sin(i * 2) * CENTER_X), -20, 0.5, 110 + (j * 15), 0.015, 3, SHOT_ICE_AQUA, 0);
				}
			}
			
			if(i == (iMax - 20)) _RenderCharge(_enmX, _enmY, 3, _colorA, _colorB);
			
			yield;
		}
		
		wait(135);
		
		_radDest = 60;
		
		// Aimed claws of lines
		int stack = 25;
		loop(7)
		{
			for(int i = 0; i <= stack; i++)
			{
				float ang = GetAngleToPlayer(_objBoss);
				
				way = 2;
				for(int j = -way; j <= way; j++)
				{
					int objShot = CreateShot_Enemy(_enmX, _enmY, 0.5, ang + (j * 20), 0.1, 7, SHOT_BALL_BLUE, 20);
				}
				
				NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
				yield;
			}
			
			wait(25);
		}
		
		async
		{
			wait(75);
			_radDest = 0;
		}
	}
}

task _Grave()
{
	int objGrave = CreatePrimObject(RP_FX_MED, PRIMITIVE_TRIANGLESTRIP, 4);
	ObjRender_SetColor(objGrave, COLOR_AZURE);
	ObjRender_SetAlpha(objGrave, 80);
	float radCur = 0;
	
	loop
	{
		float plX = GetPlayerX();
		float plY = GetPlayerY();
		
		ObjPrim_SetVertexPosition(objGrave, 0, plX + radCur * cos(0), plY + radCur * sin(0), ID_INVALID);
		ObjPrim_SetVertexPosition(objGrave, 1, plX + radCur * cos(90), plY + radCur * sin(90), ID_INVALID);
		ObjPrim_SetVertexPosition(objGrave, 2, plX + radCur * cos(270), plY + radCur * sin(270), ID_INVALID);
		ObjPrim_SetVertexPosition(objGrave, 3, plX + radCur * cos(180), plY + radCur * sin(180), ID_INVALID);
		radCur = Interpolate_Smooth(radCur, _radDest, 0.2);
		
		if(_radDest > 0) SetPlayerSpeed(_spd[0] / 3, _spd[1] / 3);
		else SetPlayerSpeed(_spd[0], _spd[1]);
		
		yield;
	}
}
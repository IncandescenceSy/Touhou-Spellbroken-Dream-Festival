///////////////////////////////////////////////////////////////
///////////////////////// Kyouko 1st //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Kyouko 1st"]
#Text["Kyouko 1st"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_RED;
int _colorB = COLOR_DMINT;

// Whether the force field is enabled
bool _field = false;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 12);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_KYOUKO);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 459, 600, 187, 101, 30, _colorA, _colorB, CENTER_X, 125, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Pattern();
	_Field();
	_Achieve();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(25000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	loop
	{	
		loop(6)
		{
			int way = 16;
			float off = rand(0, 360);
			float offX = rand(-50, 50);
			float offY = rand(-20, 20);
			for(int i = 0; i <= way; i++)
			{
				float ang = (i * (360 / way)) + off;
				int objShot = CreateShot_Enemy(_enmX + offX, _enmY + offY, 0, 0, 0, 0, SHOT_SCALE_RED, 15);
				ObjMove_AddPatternB2(objShot, 0, 1.5 * cos(ang), 1.5 * sin(ang), -0.001 * cos(ang), 0.015, -0.7 * cos(ang), 2);
				_ManageShot(objShot);
			}
			
			NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			
			wait(45);
		}
		
		_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
		
		wait(70);
		
		_field = true;
		
		int iMax = 300;
		for(int i = 0; i <= iMax; i++)
		{
			if(i % 15 == 0)
			{
				float ang = GetAngleToPlayer(_objBoss);
				int stack = 8;
				for(int j = 0; j <= stack; j++)
				{
					int way = 1;
					for(int k = -way; k <= way; k++)
					{
						_ManageShotA(CreateShot_Enemy(_enmX, _enmY, 0.5 + (j * 0.2), ang + (k * 20), 0.035 + (j * 0.015), 5 + j, SHOT_KNIFE_MINT, 20));
					}
				}
				
				NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
			}
			
			if(i == iMax - 100) _RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
			else if(i == iMax - 30) _field = false;
			
			yield;
		}
		
	}
}

task _ManageShot(int objShot_)
{
	while(!_field && Obj_IsExists(objShot_)) yield;
	
	bool isInside = Obj_IsInArea(objShot_, 0, FRAME_HEIGHT - 90, FRAME_WIDTH, FRAME_HEIGHT);
	
	while(_field && Obj_IsExists(objShot_))
	{
		if(isInside)
		{
			if(!Obj_IsInArea(objShot_, 0, FRAME_HEIGHT - 90, FRAME_WIDTH, FRAME_HEIGHT))
			{
				ObjMove_SetAngle(objShot_, ObjMove_GetAngle(objShot_) + rand(135, 225));
				wait(5);
			}
		}
		else
		{
			if(Obj_IsInArea(objShot_, 0, FRAME_HEIGHT - 90, FRAME_WIDTH, FRAME_HEIGHT))
			{
				ObjMove_SetAngle(objShot_, ObjMove_GetAngle(objShot_) + rand(135, 225));
				wait(5);
			}
		}
		
		yield;
	}
}

task _ManageShotA(int objShot_)
{
	while(_field && Obj_IsExists(objShot_))
	{
		if(ObjMove_GetY(objShot_) >= FRAME_HEIGHT - 110)
		{
			ObjMove_SetAngle(objShot_, ObjMove_GetAngle(objShot_) + rand(135, 225));
				wait(5);
		}
		
		yield;
	}
}

task _Field()
{
	int objField = CreateSprite2D_NoTexture_Dest_RGB
	(
		RP_FX_MED_H, BLEND_ALPHA,
		0, 0, 1, 1,
		0, FRAME_HEIGHT - 90, FRAME_WIDTH, FRAME_HEIGHT,
		COLOR_AZURE
	);
	ObjRender_SetAlpha(objField, 0);
		
	loop
	{
		ObjRender_SetAlpha(objField, Interpolate_Smooth(ObjRender_GetAlpha(objField), _field * 80, 0.18));
		
		yield;
	}
}

task _Achieve()
{
	SetAreaCommonData(AREA_GAME, ACHIEVE_READY, CH23);
	
	loop
	{
		if(_field && Obj_IsInArea(_objPlayer, 0, FRAME_HEIGHT - 90, FRAME_WIDTH, FRAME_HEIGHT))
		{
			SetAreaCommonData(AREA_GAME, ACHIEVE_READY, "ID_INVALID");
			return;
		}
		
		yield;
	}
}
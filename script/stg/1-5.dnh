///////////////////////////////////////////////////////////////
////////////////////// Wakasagahime 2nd ///////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Wakasagahime 2nd"]
#Text["Wakasagahime 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_MINT;
int _colorB = COLOR_AZURE;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 5);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_WAKASAGAHIME);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 372, 600, 170, 99, 90, _colorA, _colorB, CENTER_X, 80, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Gravity();
	_Waves();
	_Rings();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(22000);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Gravity()
{
	loop
	{
		if(GetPlayerY() < 6.001) NotifyEvent(_ID_PLAYER, EV_KILL_PLAYER, ID_INVALID);
		
		ObjMove_SetY(_objPlayer, GetPlayerY() - 1);
		
		yield;
	}
}

task _Waves()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(70);
	
	for(int i = 0; ; i++)
	{
		if(i % 9 == 0)
		{
			CreateShot_Enemy(CENTER_X + (sin(i) * CENTER_X), FRAME_HEIGHT + 10, 1, 270, 0, 1, SHOT_SCALE_AQUA, 0);
			CreateShot_Enemy(CENTER_X - (sin(i) * CENTER_X), FRAME_HEIGHT + 10, 1, 270, 0, 1, SHOT_SCALE_AZURE, 0);
		}
		 
		yield;
	}
}

task _Rings()
{
	wait(60);
	
	loop
	{
		int way = 20;
		float off = rand(0, 360);
		for(int i = 0; i <= way; i++)
		{
			float ang = (i * (360 / way)) + off;
			ObjMove_AddPatternB2(CreateShot_Enemy(_enmX, _enmY, 0, 0, 0, 0, SHOT_BALL_BLUE, 30), 0, 1.5 * cos(ang), 1.5 * sin(ang), -0.001 * cos(ang), 0.015, -0.7 * cos(ang), 2);
		}
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(45);
	}
}
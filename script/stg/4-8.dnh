///////////////////////////////////////////////////////////////
/////////////////////////// Marisa ////////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Marisa"]
#Text["Marisa"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_BLUE;
int _colorB = COLOR_DBLUE;

// Bullets
int[] _shots = [SHOT_LARGE_STAR_RED, SHOT_LARGE_STAR_YELLOW, SHOT_LARGE_STAR_ORANGE, SHOT_LARGE_STAR_GREEN, SHOT_LARGE_STAR_BLUE, SHOT_LARGE_STAR_PURPLE, SHOT_LARGE_STAR_PINK];


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	 
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 35);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_MARISA);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 355, 609, 186, 103, 70, _colorA, _colorB, CENTER_X, CENTER_Y, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	// Pattern
	_Pattern();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)             SetScriptResult(1);
		case(EV_REQUEST_TIMER)            SetScriptResult(30);
		case(EV_REQUEST_IS_DURABLE_SPELL) SetScriptResult(true);
}

@MainLoop
{	
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(70);
	
	for(int i = -20; i <= FRAME_WIDTH + 20; i += (FRAME_WIDTH + 40) / 10)
    {
        for(int j = -20; j <= FRAME_HEIGHT + 20; j += (FRAME_WIDTH + 40) / 10)
        {
            _CreateStar(i, j);
        }
    }
	
	wait(60);
	
	ObjMove_SetDestAtFrame(_objBoss, CENTER_X, 40, 60, LERP_DECELERATE);
	
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 3, _colorA, _colorB);
	
	wait(155);
	
	ObjEnemyBossScene_StartSpell(_objScene);
	
	ObjMove_SetDestAtFrame(_objBoss, CENTER_X, FRAME_HEIGHT + 90, 30, LERP_ACCELERATE);
	
	_BossTrail();
	
	wait(30);
	
	int[][] pos = [[-90, 120, FRAME_WIDTH + 90, 120], [-90, FRAME_HEIGHT - 120, FRAME_WIDTH + 90, FRAME_HEIGHT - 120], [90, -90, 90, FRAME_HEIGHT + 90], [FRAME_WIDTH - 90, -90, FRAME_WIDTH - 90, FRAME_HEIGHT + 90]];
	
	loop
	{
		for(int i = 0; i < length(pos); i++)
		{
			ObjMove_SetPosition(_objBoss, pos[i][0], pos[i][1]);
			ObjMove_SetDestAtFrame(_objBoss, pos[i][2], pos[i][3], 55, LERP_SMOOTH);
			
			wait(45);
		}
		
		for(int i = 0; i < length(pos); i++)
		{
			ObjMove_SetPosition(_objBoss, pos[i][2], pos[i][3]);
			ObjMove_SetDestAtFrame(_objBoss, pos[i][0], pos[i][1], 55, LERP_SMOOTH);
			
			wait(45);
		}
		
	}
}

task _CreateStar(float destX_, float destY_)
{
	int objStar = CreateShot_Enemy(_enmX, _enmY, 0, 0, 0, 0, [SHOT_STAR_RED, SHOT_STAR_YELLOW, SHOT_STAR_ORANGE, SHOT_STAR_GREEN, SHOT_STAR_BLUE, SHOT_STAR_PURPLE, SHOT_STAR_PINK][prand_int(0, 6)], 30);
	
	ObjMove_SetDestAtFrame(objStar, destX_, destY_, 90, LERP_DECELERATE);
	
	/*loop
	{
		ObjMove_SetPosition(objStar, Interpolate_Smooth(ObjMove_GetX(objStar), _enmX, 0.015), Interpolate_Smooth(ObjMove_GetY(objStar), _enmY, 0.015));
		
		yield;
	}*/
}

task _BossTrail()
{
	loop
	{
		loop(6)
		{
			float ang = ObjMove_GetAngle(_objBoss) + rand(-25, 25);
			int objShot = CreateShot_Enemy(_enmX, _enmY, 0, 0, 0, 0, _shots[prand_int(0, 6)], 15);
			ObjRender_SetBlendType(objShot, BLEND_ADD_ARGB);
			ObjMove_AddPatternB2(objShot, 0, 0.1 * cos(ang), 0.05 * sin(ang), 0.075 * cos(ang), 0.05 * sin(ang), 10 * cos(ang), 5 * sin(ang));
		}
		
		yield;
	}
}
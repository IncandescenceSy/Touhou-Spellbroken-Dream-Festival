///////////////////////////////////////////////////////////////
///////////////////////// Orange 2nd //////////////////////////
///////////////////////////////////////////////////////////////


//////////////////////// Script Header ////////////////////////

#TouhouDanmakufu[Single]
#Title["Orange 2nd"]
#Text["Orange 2nd"]
#System["./../system/system.dnh"]


////////////////////// Script Inclusions //////////////////////

// This library contains all variables and functions needed in order for singles to properly manage bosses
#include "./../lib/lib_boss.dnh"

// This library contains constants for various things so that I don't need to remember tons of things that never change
#include "./../lib/lib_const.dnh"

// This library contains functions for creating and manipulating bullets
#include "./../lib/lib_shot.dnh"

// This is the shot constants for Terraformer9x's shotsheet, which loads the shot data
#include "./../lib/shot_const.dnh"


///////////////////// File Scope Variables ////////////////////

// Boss colors
int _colorA = COLOR_GREEN;
int _colorB = COLOR_DGREEN;

// Particle list for laser collision effects
int _objPartStar = CreateParticleList2D
(
	DIR_IMG_EFF_STAR,
	0, 0, 256, 256,
	BLEND_ADD_ARGB, RP_FX_MED
);

bool _isHitbox = true;


//////////////////////// Script Blocks ////////////////////////

@Initialize
{
	SetAutoDeleteObject(true);
	
	// Boss
	_objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(_objBoss);
	
	// Scene
	_objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(_objScene);
	
	// Script ID logging
	SetAreaCommonData(AREA_SCRIPTS, SCRIPT_SINGLE, GetOwnScriptID());
	
	// Spell ID
	SetAreaCommonData(AREA_GAME, SPELL_ID, 24);
	
	// Setup
	SetAreaCommonData(AREA_GAME, BOSS_NAME, CHAR_ORANGE);
	SetAreaCommonData(AREA_GAME, BACKGROUND, [DIR_IMG_BG ~ "/back_" ~ GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID) ~ ".png"]);
	
	SetAreaCommonData(AREA_GAME, IS_NORMAL_HITBOX, false);
	
	NotifyEvent(_ID_SYSTEM, EV_SPELL_START, _objBoss, _objScene, GetAreaCommonData(AREA_GAME, SPELL_ID, ID_INVALID), GetAreaCommonData(AREA_GAME, BOSS_NAME, ID_INVALID), 354, 650, 176, 77, 50, _colorA, _colorB, CENTER_X, 140, STANDARD_SPELLSCORE, GetAreaCommonData(AREA_GAME, BACKGROUND, ID_INVALID));
	
	NotifyEvent(_ID_PLAYER, EV_RECOLOR_WHILE_BOSS_LIVES, [0, 255, 0], _objBoss);
	
	NotifyEvent(_ID_SYSTEM, EV_RENDER_PLAYER_CIRCLE, _objBoss, 0.125, _colorB);
	NotifyEvent(_ID_SYSTEM, EV_TOGGLE_PLAYER_CIRCLE, true);
	NotifyEvent(_ID_SYSTEM, EV_WARNING_GLOW, _colorA);
	
	// Pattern
	_Pattern();
	_Hitbox();
	_Filter();
}

@Event
{
	alternative(GetEventType())
		case(EV_REQUEST_LIFE)  SetScriptResult(12400);
		case(EV_REQUEST_TIMER) SetScriptResult(90);
}

@MainLoop
{
	_enmX = ObjMove_GetX(_objBoss);
	_enmY = ObjMove_GetY(_objBoss);
	
	yield;
}


///////////////////////// Script Tasks ////////////////////////

task _Pattern()
{
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);
	
	NotifyEvent(_ID_SYSTEM, EV_TOGGLE_PLAYER_CIRCLE, true);
	
	int iBreak = 500;
	for(int i = ObjEnemy_GetInfo(_objBoss, INFO_LIFE); i > iBreak; i = ObjEnemy_GetInfo(_objBoss, INFO_LIFE))
	{
		_ClawLines();
				
		loop(50)
		{
			if(ObjEnemy_GetInfo(_objBoss, INFO_LIFE) < iBreak) break;
			yield;
		}
			
		loop(2) _LaserBomb();
			
		loop(90)
		{
			if(ObjEnemy_GetInfo(_objBoss, INFO_LIFE) < iBreak) break;
			yield;
		}
	}
	
	ObjEnemy_SetDamageRate(_objBoss, 0, 0);
	_isHitbox = false;
	NotifyEvent(_ID_SYSTEM, EV_SET_LIFEBAR_ALPHA, 0);
	
	wait(120);
	
	loop(3)
	{
		Lunge();
			
		wait(50);
	}
		
	wait(60);
	
	ObjEnemy_SetLife(_objBoss, 0);
}

task _ClawLines()
{
	loop(2)
	{
		int iMax = 3;
		for(int i = 0; i <= iMax; i++)
		{
			for(int j = -4; j <= 4; j++)
			{
				CreateShot_Enemy(_enmX, _enmY, 0, GetAngleToPlayer(_objBoss) + (j * 25), 0.025 + (0.01 * i), 3.25 + (0.5 * i), SHOT_LARGE_ORANGE, 25);
			}
		}
		
		NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
		
		wait(30);
	}
}

task _LaserBomb()
{
	int objEnemy = CreateEnemy
	(
		1, 0, false, true,
		COLOR_ORANGE, STANDARD_ENEMYSCALE, true, true,
		_enmX, _enmY, _enmX, _enmY, 0
	);
	
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_TRANS);
	
	ObjMove_SetDestAtFrame(objEnemy, rand(50, FRAME_WIDTH -50), rand(50, FRAME_HEIGHT - 50), 60, LERP_DECELERATE);
	
	wait(60);
	
	float enmX = ObjMove_GetX(objEnemy);
	float enmY = ObjMove_GetY(objEnemy);
	
	_RenderCharge(enmX, enmY, 1, COLOR_GREEN, COLOR_GREEN);
	
	wait(65);
	
	CreateLaser_Blockable(enmX, enmY, dottheta(enmX, enmY, GetPlayerX(), GetPlayerY()), 512, 15, 120, SHOT_CURVY_LASER_ORANGE, 0.85, 35, _objPartStar);
	
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_LASER);
	
	wait(120);
	
	if(!GetAreaCommonData(AREA_GAME, IS_PLAYER_DOWN, false)) ObjEnemy_SetLife(objEnemy, 0);
}

function<void> Lunge()
{
	float posX = GetPlayerX();
	
	ObjMove_SetDestAtFrame(_objBoss, posX, 80, 60, LERP_DECELERATE);
	
	wait(60);
	
	_RenderCharge(_enmX, _enmY, 1, _colorA, _colorB);
	
	wait(65);

	ObjMove_SetDestAtFrame(_objBoss, posX, FRAME_HEIGHT + 300, 70, LERP_SMOOTH);
	
	wait(30);
	
	int spread = 3;
	for(int i = -spread; i <= spread; i++) CreateLaser_Blockable(posX + (i * 20), FRAME_HEIGHT + 20, 270 + (i * 15), 512, 17, 180, SHOT_CURVY_LASER_ORANGE, 0.85, 35, _objPartStar);
	
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_LASER);
	
	// Rings
	int stack = 5;
	float off = rand(0, 360);
	float wvel = 0.25;
	for(int i = 0; i <= stack; i++)
	{
		int way = 20;
		for(int j = 0; j <= way; j++)
		{
			ObjMove_SetAngularVelocity(CreateShot_Enemy(posX, FRAME_HEIGHT, 0.35 + (i / 6), (j * (360 / way)) + off, 0.01 + (i / 350) , 1.5 + (i / 2.5), SHOT_BALL_ORANGE, 25), wvel);
		}
		wvel *= -1;
	}
		
	NotifyEvent(_ID_PACKAGE, EV_SFX_PLAY, DIR_SFX_BULLET_SHOOT);
	
	ObjMove_SetPosition(_objBoss, _enmX, -300);
	
	ObjMove_SetDestAtFrame(_objBoss, posX, 100, 90, LERP_SMOOTH);
	
	wait(90);
}

task _Hitbox()
{
	const int RADIUS_HITBOX = 32;
	
	while(_isHitbox)
	{
		ObjEnemy_SetIntersectionCircleToShot(_objBoss, _enmX, _enmY, RADIUS_HITBOX);
		ObjEnemy_SetIntersectionCircleToPlayer(_objBoss, _enmX, _enmY, RADIUS_HITBOX / 2);
		
		yield;
	}
	
	loop
	{
		ObjEnemy_SetIntersectionCircleToPlayer(_objBoss, _enmX, _enmY, RADIUS_HITBOX / 2);
		
		yield;
	}
}

// Zeroranger shader
task _Filter()
{	
	if(GetAreaCommonData(AREA_SETTINGS, SDR_MISC, 1))
	{
		SetInvalidRenderPriorityA1(RP_MIN, RP_UI_FRAME - 1);
		
		int objZeroranger = CreateSprite2D_Dest
		(
			RT6, RP_MAX, BLEND_ALPHA,
			0, 0, SCREEN_WIDTH, SCREEN_HEIGHT,
			0, 0, SCREEN_WIDTH, SCREEN_HEIGHT
		);
		ObjShader_SetShaderF(objZeroranger, DIR_SDR_ZERORANGER);
		ObjShader_SetTechnique(objZeroranger, TEC_ZERORANGER);
		
		loop
		{
			SetInvalidRenderPriorityA1(RP_MIN, RP_UI_FRAME + 4);
			
			RenderToTextureA1(RT6, RP_UI_VIS, RP_UI_FRAME + 4, true);
			
			yield;
		}
	}
	else
	{
		int objShader = ObjShader_Create();
		ObjShader_SetShaderF(objShader, DIR_SDR_ZERORANGER);
		ObjShader_SetTechnique(objShader, TEC_ZERORANGER);
		SetShaderI(objShader, RP_MIN, RP_MAX);
	}
}